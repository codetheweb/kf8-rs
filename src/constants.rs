use std::fmt;

use num_enum::TryFromPrimitive;

#[derive(Debug, PartialEq)]
pub enum MainLanguage {
    Neutral = 0,
    Afrikaans = 54,
    Albanian = 28,
    Arabic = 1,
    Armenian = 43,
    Assamese = 77,
    Azeri = 44,
    Basque = 45,
    Belarusian = 35,
    Bengali = 69,
    Bulgarian = 2,
    Catalan = 3,
    Chinese = 4,
    Czech = 5,
    Danish = 6,
    Dutch = 19,
    English = 9,
    Estonian = 37,
    Faeroese = 56,
    Farsi = 41,
    Finnish = 11,
    French = 12,
    Georgian = 55,
    German = 7,
    Greek = 8,
    Gujarati = 71,
    Hebrew = 13,
    Hindi = 57,
    Hungarian = 14,
    Icelandic = 15,
    Indonesian = 33,
    Italian = 16,
    Japanese = 17,
    Kannada = 75,
    Kazak = 63,
    Konkani = 87,
    Korean = 18,
    Latvian = 38,
    Lithuanian = 39,
    Macedonian = 47,
    Malay = 62,
    Malayalam = 76,
    Maltese = 58,
    Marathi = 78,
    Nepali = 97,
    Norwegian = 20,
    Oriya = 72,
    Polish = 21,
    Portuguese = 22,
    Punjabi = 70,
    Rhaetoromanic = 23,
    Romanian = 24,
    Russian = 25,
    Sami = 59,
    Sanskrit = 79,
    Serbian = 26,
    Slovak = 27,
    Slovenian = 36,
    Sorbian = 46,
    Spanish = 10,
    Sutu = 48,
    Swahili = 65,
    Swedish = 29,
    Tamil = 73,
    Tatar = 68,
    Telugu = 74,
    Thai = 30,
    Tsonga = 49,
    Tswana = 50,
    Turkish = 31,
    Ukrainian = 34,
    Urdu = 32,
    Uzbek = 67,
    Vietnamese = 42,
    Xhosa = 52,
    Zulu = 53,
}

impl TryFrom<u32> for MainLanguage {
    type Error = ();

    fn try_from(value: u32) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(MainLanguage::Neutral),
            54 => Ok(MainLanguage::Afrikaans),
            28 => Ok(MainLanguage::Albanian),
            1 => Ok(MainLanguage::Arabic),
            43 => Ok(MainLanguage::Armenian),
            77 => Ok(MainLanguage::Assamese),
            44 => Ok(MainLanguage::Azeri),
            45 => Ok(MainLanguage::Basque),
            35 => Ok(MainLanguage::Belarusian),
            69 => Ok(MainLanguage::Bengali),
            2 => Ok(MainLanguage::Bulgarian),
            3 => Ok(MainLanguage::Catalan),
            4 => Ok(MainLanguage::Chinese),
            5 => Ok(MainLanguage::Czech),
            6 => Ok(MainLanguage::Danish),
            19 => Ok(MainLanguage::Dutch),
            9 => Ok(MainLanguage::English),
            37 => Ok(MainLanguage::Estonian),
            56 => Ok(MainLanguage::Faeroese),
            41 => Ok(MainLanguage::Farsi),
            11 => Ok(MainLanguage::Finnish),
            12 => Ok(MainLanguage::French),
            55 => Ok(MainLanguage::Georgian),
            7 => Ok(MainLanguage::German),
            8 => Ok(MainLanguage::Greek),
            71 => Ok(MainLanguage::Gujarati),
            13 => Ok(MainLanguage::Hebrew),
            57 => Ok(MainLanguage::Hindi),
            14 => Ok(MainLanguage::Hungarian),
            15 => Ok(MainLanguage::Icelandic),
            33 => Ok(MainLanguage::Indonesian),
            16 => Ok(MainLanguage::Italian),
            17 => Ok(MainLanguage::Japanese),
            75 => Ok(MainLanguage::Kannada),
            63 => Ok(MainLanguage::Kazak),
            87 => Ok(MainLanguage::Konkani),
            18 => Ok(MainLanguage::Korean),
            38 => Ok(MainLanguage::Latvian),
            39 => Ok(MainLanguage::Lithuanian),
            47 => Ok(MainLanguage::Macedonian),
            62 => Ok(MainLanguage::Malay),
            76 => Ok(MainLanguage::Malayalam),
            58 => Ok(MainLanguage::Maltese),
            78 => Ok(MainLanguage::Marathi),
            97 => Ok(MainLanguage::Nepali),
            20 => Ok(MainLanguage::Norwegian),
            72 => Ok(MainLanguage::Oriya),
            21 => Ok(MainLanguage::Polish),
            22 => Ok(MainLanguage::Portuguese),
            70 => Ok(MainLanguage::Punjabi),
            23 => Ok(MainLanguage::Rhaetoromanic),
            24 => Ok(MainLanguage::Romanian),
            25 => Ok(MainLanguage::Russian),
            59 => Ok(MainLanguage::Sami),
            79 => Ok(MainLanguage::Sanskrit),
            26 => Ok(MainLanguage::Serbian),
            27 => Ok(MainLanguage::Slovak),
            36 => Ok(MainLanguage::Slovenian),
            46 => Ok(MainLanguage::Sorbian),
            10 => Ok(MainLanguage::Spanish),
            48 => Ok(MainLanguage::Sutu),
            65 => Ok(MainLanguage::Swahili),
            29 => Ok(MainLanguage::Swedish),
            73 => Ok(MainLanguage::Tamil),
            68 => Ok(MainLanguage::Tatar),
            74 => Ok(MainLanguage::Telugu),
            30 => Ok(MainLanguage::Thai),
            49 => Ok(MainLanguage::Tsonga),
            50 => Ok(MainLanguage::Tswana),
            31 => Ok(MainLanguage::Turkish),
            34 => Ok(MainLanguage::Ukrainian),
            32 => Ok(MainLanguage::Urdu),
            67 => Ok(MainLanguage::Uzbek),
            42 => Ok(MainLanguage::Vietnamese),
            52 => Ok(MainLanguage::Xhosa),
            53 => Ok(MainLanguage::Zulu),
            _ => Err(()),
        }
    }
}

#[derive(Debug, PartialEq)]
pub enum SubLanguage {
    Neutral,
    UzbekLatin,
    UzbekCyrillic,
    SerbianCyrillic,
    SpanishGuatemala,
    SpanishCostaRica,
    SpanishPanama,
    SpanishDominicanRepublic,
    SpanishVenezuela,
    SpanishColombia,
    SpanishPeru,
    SpanishArgentina,
    SpanishEcuador,
    SpanishChile,
    SpanishUruguay,
    SpanishParaguay,
    SpanishBolivia,
    SpanishElSalvador,
    SpanishHonduras,
    SpanishNicaragua,
    SpanishPuertoRico,
}

impl TryFrom<u32> for SubLanguage {
    type Error = ();

    fn try_from(value: u32) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(SubLanguage::Neutral),
            1 => Ok(SubLanguage::UzbekLatin),
            2 => Ok(SubLanguage::UzbekCyrillic),
            3 => Ok(SubLanguage::SerbianCyrillic),
            4 => Ok(SubLanguage::SpanishGuatemala),
            5 => Ok(SubLanguage::SpanishCostaRica),
            6 => Ok(SubLanguage::SpanishPanama),
            7 => Ok(SubLanguage::SpanishDominicanRepublic),
            8 => Ok(SubLanguage::SpanishVenezuela),
            9 => Ok(SubLanguage::SpanishColombia),
            10 => Ok(SubLanguage::SpanishPeru),
            11 => Ok(SubLanguage::SpanishArgentina),
            12 => Ok(SubLanguage::SpanishEcuador),
            13 => Ok(SubLanguage::SpanishChile),
            14 => Ok(SubLanguage::SpanishUruguay),
            15 => Ok(SubLanguage::SpanishParaguay),
            16 => Ok(SubLanguage::SpanishBolivia),
            17 => Ok(SubLanguage::SpanishElSalvador),
            18 => Ok(SubLanguage::SpanishHonduras),
            19 => Ok(SubLanguage::SpanishNicaragua),
            20 => Ok(SubLanguage::SpanishPuertoRico),
            _ => Err(()),
        }
    }
}

#[derive(Debug, Eq, PartialEq, TryFromPrimitive, Hash)]
#[repr(u32)]
pub enum MetadataId {
    DrmServerId = 1,
    DrmCommerceId = 2,
    DrmEbookbaseBookId = 3,
    DrmEbookbaseDepId = 4,
    Creator = 100,
    Publisher = 101,
    Imprint = 102,
    Description = 103,
    ISBN = 104,
    Subject = 105,
    Published = 106,
    Review = 107,
    Contributor = 108,
    Rights = 109,
    SubjectCode = 110,
    Type = 111,
    Source = 112,
    ASIN = 113,
    Adult = 117,
    RetailPrice = 118,
    RetailCurrency = 119,
    TSC = 120,
    FixedLayout = 122,
    BookType = 123,
    OrientationLock = 124,
    OriginalResolution = 126,
    ZeroGutter = 127,
    ZeroMargin = 128,
    MetadataResourceURI = 129,
    RegionMagnification = 132,
    LendingEnabled = 150,
    DictShortName = 200,
    CdeType = 501,
    LastUpdateTime = 502,
    UpdatedTitle = 503,
    CDEContentKey = 504,
    AmazonContentReference = 505,
    TitleLanguage = 506,
    TitleDisplayDirection = 507,
    TitlePronunciation = 508,
    TitleCollation = 509,
    SecondaryTitle = 510,
    SecondaryTitleLanguage = 511,
    SecondaryTitleDirection = 512,
    SecondaryTitlePronunciation = 513,
    SecondaryTitleCollation = 514,
    AuthorLanguage = 515,
    AuthorDisplayDirection = 516,
    AuthorPronunciation = 517,
    AuthorCollation = 518,
    AuthorType = 519,
    PublisherLanguage = 520,
    PublisherDisplayDirection = 521,
    PublisherPronunciation = 522,
    PublisherCollation = 523,
    ContentLanguageTag = 524,
    PrimaryWritingMode = 525,
    NCXIngestedBySoftware = 526,
    PageProgressionDirection = 527,
    OverrideKindleFonts = 528,
    CompressionUpgraded = 529,
    SoftHyphensInContent = 530,
    DictionaryInLanguage = 531,
    DictionaryOutLanguage = 532,
    FontConverted = 533,
    AmazonCreatorInfo = 534,
    CreatorBuildTag = 535,
    HDMediaContainersInfo = 536,
    ResourceContainerFidelity = 538,
    HDContainerMimetype = 539,
    SampleForSpecialPurpose = 540,
    KindletoolOperationInformation = 541,
    ContainerId = 542,
    AssetType = 543,
    Unknown544 = 544,
}

impl fmt::Display for MetadataId {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                MetadataId::DrmServerId => "Drm Server Id",
                MetadataId::DrmCommerceId => "Drm Commerce Id",
                MetadataId::DrmEbookbaseBookId => "Drm Ebookbase Book Id",
                MetadataId::DrmEbookbaseDepId => "Drm Ebookbase Dep Id",
                MetadataId::Creator => "Creator",
                MetadataId::Publisher => "Publisher",
                MetadataId::Imprint => "Imprint",
                MetadataId::Description => "Description",
                MetadataId::ISBN => "ISBN",
                MetadataId::Subject => "Subject",
                MetadataId::Published => "Published",
                MetadataId::Review => "Review",
                MetadataId::Contributor => "Contributor",
                MetadataId::Rights => "Rights",
                MetadataId::SubjectCode => "SubjectCode",
                MetadataId::Type => "Type",
                MetadataId::Source => "Source",
                MetadataId::ASIN => "ASIN",
                MetadataId::Adult => "Adult",
                MetadataId::RetailPrice => "Retail-Price",
                MetadataId::RetailCurrency => "Retail-Currency",
                MetadataId::TSC => "TSC",
                MetadataId::FixedLayout => "fixed-layout",
                MetadataId::BookType => "book-type",
                MetadataId::OrientationLock => "orientation-lock",
                MetadataId::OriginalResolution => "original-resolution",
                MetadataId::ZeroGutter => "zero-gutter",
                MetadataId::ZeroMargin => "zero-margin",
                MetadataId::MetadataResourceURI => "MetadataResourceURI",
                MetadataId::RegionMagnification => "RegionMagnification",
                MetadataId::LendingEnabled => "LendingEnabled",
                MetadataId::DictShortName => "DictShortName",
                MetadataId::CdeType => "cdeType",
                MetadataId::LastUpdateTime => "last_update_time",
                MetadataId::UpdatedTitle => "Updated_Title",
                MetadataId::CDEContentKey => "CDEContentKey",
                MetadataId::AmazonContentReference => "AmazonContentReference",
                MetadataId::TitleLanguage => "Title-Language",
                MetadataId::TitleDisplayDirection => "Title-Display-Direction",
                MetadataId::TitlePronunciation => "Title-Pronunciation",
                MetadataId::TitleCollation => "Title-Collation",
                MetadataId::SecondaryTitle => "Secondary-Title",
                MetadataId::SecondaryTitleLanguage => "Secondary-Title-Language",
                MetadataId::SecondaryTitleDirection => "Secondary-Title-Direction",
                MetadataId::SecondaryTitlePronunciation => "Secondary-Title-Pronunciation",
                MetadataId::SecondaryTitleCollation => "Secondary-Title-Collation",
                MetadataId::AuthorLanguage => "Author-Language",
                MetadataId::AuthorDisplayDirection => "Author-Display-Direction",
                MetadataId::AuthorPronunciation => "Author-Pronunciation",
                MetadataId::AuthorCollation => "Author-Collation",
                MetadataId::AuthorType => "Author-Type",
                MetadataId::PublisherLanguage => "Publisher-Language",
                MetadataId::PublisherDisplayDirection => "Publisher-Display-Direction",
                MetadataId::PublisherPronunciation => "Publisher-Pronunciation",
                MetadataId::PublisherCollation => "Publisher-Collation",
                MetadataId::ContentLanguageTag => "Content-Language-Tag",
                MetadataId::PrimaryWritingMode => "primary-writing-mode",
                MetadataId::NCXIngestedBySoftware => "NCX-Ingested-By-Software",
                MetadataId::PageProgressionDirection => "page-progression-direction",
                MetadataId::OverrideKindleFonts => "override-kindle-fonts",
                MetadataId::CompressionUpgraded => "Compression-Upgraded",
                MetadataId::SoftHyphensInContent => "Soft-Hyphens-In-Content",
                MetadataId::DictionaryInLanguage => "Dictionary_In_Langague",
                MetadataId::DictionaryOutLanguage => "Dictionary_Out_Language",
                MetadataId::FontConverted => "Font_Converted",
                MetadataId::AmazonCreatorInfo => "Amazon_Creator_Info",
                MetadataId::CreatorBuildTag => "Creator-Build-Tag",
                MetadataId::HDMediaContainersInfo => "HD-Media-Containers-Info",
                MetadataId::ResourceContainerFidelity => "Resource-Container-Fidelity",
                MetadataId::HDContainerMimetype => "HD-Container-Mimetype",
                MetadataId::SampleForSpecialPurpose => "Sample-For_Special-Purpose",
                MetadataId::KindletoolOperationInformation => "Kindletool-Operation-Information",
                MetadataId::ContainerId => "Container_Id",
                MetadataId::AssetType => "Asset-Type",
                MetadataId::Unknown544 => "Unknown_544",
            }
        )
    }
}

#[derive(Debug, TryFromPrimitive)]
#[repr(u32)] // Assuming the values fit in u16, change if needed
pub enum MetadataIdValue {
    #[num_enum(default)]
    Unknown = 0,
    VersionNumber = 114,
    Sample = 115,
    StartOffset = 116,
    Mobi8BoundarySection = 121,
    EmbeddedRecordCount = 125,
    OfflineSample = 130,
    MetadataRecordOffset = 131,
    CoverOffset = 201,
    ThumbOffset = 202,
    HasFakeCover = 203,
    CreatorSoftware = 204,
    CreatorMajorVersion = 205,
    CreatorMinorVersion = 206,
    CreatorBuildNumber = 207,
    ClippingLimit = 401,
    PublisherLimit = 402,
    TextToSpeechDisabled = 404,
    RentalExpirationTime = 406,
}

impl fmt::Display for MetadataIdValue {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            MetadataIdValue::VersionNumber => write!(f, "versionNumber"),
            MetadataIdValue::Sample => write!(f, "sample"),
            MetadataIdValue::StartOffset => write!(f, "StartOffset"),
            MetadataIdValue::Mobi8BoundarySection => write!(f, "Mobi8-Boundary-Section"),
            MetadataIdValue::EmbeddedRecordCount => write!(f, "Embedded-Record-Count"),
            MetadataIdValue::OfflineSample => write!(f, "Offline-Sample"),
            MetadataIdValue::MetadataRecordOffset => write!(f, "Metadata-Record-Offset"),
            MetadataIdValue::CoverOffset => write!(f, "CoverOffset"),
            MetadataIdValue::ThumbOffset => write!(f, "ThumbOffset"),
            MetadataIdValue::HasFakeCover => write!(f, "HasFakeCover"),
            MetadataIdValue::CreatorSoftware => write!(f, "Creator-Software"),
            MetadataIdValue::CreatorMajorVersion => write!(f, "Creator-Major-Version"),
            MetadataIdValue::CreatorMinorVersion => write!(f, "Creator-Minor-Version"),
            MetadataIdValue::CreatorBuildNumber => write!(f, "Creator-Build-Number"),
            MetadataIdValue::ClippingLimit => write!(f, "Clipping-Limit"),
            MetadataIdValue::PublisherLimit => write!(f, "Publisher-Limit"),
            MetadataIdValue::TextToSpeechDisabled => write!(f, "Text-to-Speech-Disabled"),
            MetadataIdValue::RentalExpirationTime => write!(f, "Rental-Expiration-Time"),
            MetadataIdValue::Unknown => write!(f, "Unknown"),
        }
    }
}
